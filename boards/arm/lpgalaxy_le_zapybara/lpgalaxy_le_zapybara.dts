/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <nordic/nrf52840_qiaa.dtsi>

#include <zephyr/dt-bindings/dt-util.h>
#include <zephyr/dt-bindings/adc/adc.h>
#include <zephyr/dt-bindings/gpio/nordic-nrf-gpio.h>

#include <dt-bindings/zmk/matrix_transform.h>

#include <freq.h>

&adc {
    status = "okay";

    #address-cells = <1>;
    #size-cells = <0>;

    channel@3 {
        reg = <3>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40)>;
        zephyr,input-positive = <NRF_SAADC_AIN2>; /* P0.30 */
        zephyr,resolution = <12>;
    };

    channel@1 {
        reg = <1>;
        zephyr,gain = "ADC_GAIN_1_6";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 3)>;
        zephyr,input-positive = <NRF_SAADC_AIN6>; /* P0.30 */
        zephyr,resolution = <12>;
    };
};

#define MUX(label, en_pin)                      \
    label: label {                        \
    	compatible = "zmk,gpio-mux";            \
        select-gpios                            \
            = <&gpio0 29 GPIO_ACTIVE_HIGH>      \
            , <&gpio0 2  GPIO_ACTIVE_HIGH>      \
            , <&gpio0 20 GPIO_ACTIVE_HIGH>      \
            ;                                   \
        en-gpios = <en_pin GPIO_ACTIVE_LOW>; \
        gpio-controller;                        \
        ngpios = <8>;                           \
        #gpio-cells = <2>;                      \
    };

/ {
    model = "Le Zapybara";
    compatible = "sporkus,le_zapybara", "nordic,nrf52840";

    chosen {
        zephyr,code-partition = &code_partition;
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,console = &cdc_acm_uart;
        zmk,battery = &vbatt;
        zephyr,shell-uart = &cdc_acm_uart;
        zmk,kscan = &kscanc;
        zmk,matrix_transform = &default_transform;
    };

    vbatt: vbatt {
        compatible = "voltage-divider";
        
        io-channels = <&adc 3>;
        output-ohms = <2000000>;
        full-ohms = <(2000000 + 806000)>;
    };

    aliases {
        led0 = &blue_led;
    };

    leds {
        compatible = "gpio-leds";
        blue_led: led_0 {
            gpios = <&gpio0 12 GPIO_ACTIVE_LOW>;
        };
    };

    default_transform: transform {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <10>;

        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)     RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)     RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)     RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
                        RC(3,1)     RC(3,3)             RC(3,6)     RC(3,8)
        >;
    };

    encoder_transform: transform_encoder {
        compatible = "zmk,matrix-transform";
        rows = <5>;
        columns = <10>;

        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)     RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)     RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)     RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
                        RC(3,1)     RC(3,3)             RC(3,6)     RC(3,8)
                                                RC(4,0)
        >;
    };

    MUX(left_mux, &gpio0 28)
    MUX(right_mux, &gpio0 13)

    kscanc: kscan_composite {
        compatible = "zmk,kscan-composite";

        matrix {
            kscan = <&matrix>;
        };

        direct {
            kscan = <&kscand>;
            row-offset = <4>; // shift direct pins to new row
        };
    };

    matrix: matrix {
        compatible = "zmk,kscan-ec-matrix";

        input-gpios
	        = <&left_mux 0 0>
	        , <&left_mux 1 0>
	        , <&left_mux 2 0>
	        , <&left_mux 3 0>
	        , <&left_mux 4 0>
	        , <&right_mux 2 0>
	        , <&right_mux 4 0>
	        , <&right_mux 6 0>
	        , <&right_mux 7 0>
	        , <&right_mux 5 0>
        ;

        strobe-gpios
            = <&gpio1 0  (GPIO_ACTIVE_HIGH| NRF_GPIO_DRIVE_H0H1)>
            , <&gpio1 10 (GPIO_ACTIVE_HIGH| NRF_GPIO_DRIVE_H0H1)>
            , <&gpio0 3  (GPIO_ACTIVE_HIGH| NRF_GPIO_DRIVE_H0H1)>
            , <&gpio1 4  (GPIO_ACTIVE_HIGH| NRF_GPIO_DRIVE_H0H1)>
            ;

        io-channels = <&adc 1>;

        matrix-relax-us = <3>;
        matrix-warm-up-us = <500>;
        adc-read-settle-us = <1>;

        strobe-input-masks = <0 0 0 (BIT(0) + BIT(2) + BIT(4) + BIT(5) + BIT(7) + BIT(9))>;

        drain-gpios = <&gpio0 22 (GPIO_ACTIVE_HIGH | NRF_GPIO_DRIVE_H0H1)>;
        power-gpios = <&gpio0 31 (GPIO_ACTIVE_HIGH | NRF_GPIO_DRIVE_H0H1)>;

        sleep-after-secs = <10>;
        active-polling-interval-ms = <2>;
        idle-polling-interval-ms = <3>;
        sleep-polling-interval-ms = <4>;

        dynamic-polling-interval;
    };

    kscand: kscan {
        compatible = "zmk,kscan-gpio-direct";
        wakeup-source;
        input-gpios
            = <&gpio0 15 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
    };

    center_encoder: encoder_center {
        compatible = "alps,ec11";
        a-gpios = <&gpio0  17 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&gpio0  7 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <24>;
        status = "okay";
    };

    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&center_encoder>;
        status = "okay";
    };

};

&pinctrl {
    spi1_default: spi1_default {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 1, 9)>,
                <NRF_PSEL(SPIM_MISO, 0, 5)>,
                <NRF_PSEL(SPIM_SCK, 0, 8)>;
        };
    };

    spi1_sleep: spi1_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 1, 9)>,
                <NRF_PSEL(SPIM_MISO, 0, 5)>,
                <NRF_PSEL(SPIM_SCK, 0, 8)>;
            low-power-enable;
        };
    };
};

&spi1 {
    status = "okay";
    
    pinctrl-0 = <&spi1_default>;
    pinctrl-1 = <&spi1_sleep>;
    pinctrl-names = "default", "sleep";

    cs-gpios = <&gpio0 6 GPIO_ACTIVE_LOW>;

    wakeup_trigger: wakeup_trigger@0 {
        reg = <0>;

        spi-max-frequency = <DT_FREQ_M(8)>;

        compatible = "zmk,adxl362-awake-trigger";
        int2-gpios = <&gpio0 26 (GPIO_ACTIVE_HIGH)>;
        wakeup-source;

        linked-devices = <&matrix>;

        wakeup_trigger_settings: normal {
            activity-threshold = <21>;
            activity-time = <0>;
            inactivity-threshold = <80>;
            inactivity-time = <50>;
        };

        wakeup_trigger_sleep_settings: sleep {
            activity-threshold = <250>;
            activity-time = <0>;
            inactivity-threshold = <500>;
            inactivity-time = <0>;
        };
    };
};

&adc {
	status = "okay";
};

&gpiote {
	status = "okay";
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};


&usbd {
	status = "okay";
	cdc_acm_uart: cdc_acm_uart {
		compatible = "zephyr,cdc-acm-uart";
		label = "CDC_ACM_0";
	};
};

&flash0 {
	/*
	 * For more information, see:
	 * http://docs.zephyrproject.org/latest/devices/dts/flash_partitions.html
	 */
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		sd_partition: partition@0 {
			label = "mbr";
			reg = <0x00000000 0x00001000>;
		};
		code_partition: partition@1000 {
			label = "code_partition";
			reg = <0x00001000 0x000d3000>;
		};

		storage_partition: partition@d4000 {
			label = "storage";
			reg = <0x000d4000 0x00020000>;
		};

		boot_partition: partition@f4000 {
			label = "adafruit_boot";
			reg = <0x000f4000 0x0000c000>;
		};
	};
};
